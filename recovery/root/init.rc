import /init.usb.rc
import /init.usb.configfs.rc
import /init.recovery.service.rc
import /init.recovery.hlthchrg.rc

on early-init
    # Apply strict SELinux checking of PROT_EXEC on mmap/mprotect calls.
    write /sys/fs/selinux/checkreqprot 0
    
    # Set the security context for the init process.
    # This should occur before anything else (e.g. ueventd) is started.
    setcon u:r:init:s0
    
    # Shouldn't be necessary, but sdcard won't start without it. http://b/22568628.
    mkdir /mnt 0775 root system

    start ueventd
    setprop persist.service.hdb.enable true

service prepprops /sbin/setprop.sh
    oneshot
    seclabel u:r:recovery:s0
    
on init
    sysclktz 0
    
    export PATH /sbin:/system/bin
    
    #export ANDROID_ROOT /system
    #export ANDROID_DATA /data
    #export EXTERNAL_STORAGE /sdcard

    # Mix device-specific information into the entropy pool
    copy /proc/cmdline /dev/urandom
    copy /default.prop /dev/urandom

    # Backward compatibility.
    symlink /system/etc /etc
    symlink /sys/kernel/debug /d

    # Mount cgroup mount point for cpu accounting
    mount cgroup none /acct cpuacct
    mkdir /acct/uid

    # Mount staging areas for devices managed by vold
    # See storage config details at http://source.android.com/tech/storage/
    mount tmpfs tmpfs /mnt mode=0755,uid=0,gid=1000

    mount configfs none /config
    chmod 0775 /config/sdcardfs
    chown system package_info /config/sdcardfs

    mkdir /mnt/secure 0700 root root
    mkdir /mnt/secure/asec 0700 root root
    mkdir /mnt/asec 0755 root system
    mkdir /mnt/obb 0755 root system
    mkdir /mnt/media_rw 0750 root media_rw
    mkdir /mnt/user 0755 root root
    mkdir /mnt/user/0 0755 root root
    mkdir /mnt/expand 0771 system system
    mkdir /mnt/appfuse 0711 root root

    # Storage views to support runtime permissions
    mkdir /mnt/runtime 0700 root root
    mkdir /mnt/runtime/default 0755 root root
    mkdir /mnt/runtime/default/self 0755 root root
    mkdir /mnt/runtime/read 0755 root root
    mkdir /mnt/runtime/read/self 0755 root root
    mkdir /mnt/runtime/write 0755 root root
    mkdir /mnt/runtime/write/self 0755 root root

    # Symlink to keep legacy apps working in multi-user world
    symlink /storage/self/primary /sdcard
    symlink /storage/self/primary /mnt/sdcard
    symlink /mnt/user/0/primary /mnt/runtime/default/self/primary

    write /proc/sys/kernel/panic_on_oops 1
    write /proc/sys/kernel/hung_task_timeout_secs 0
    write /proc/cpu/alignment 4

    # Create location for fs_mgr to store abbreviated output from filesystem
    # checker programs.
    mkdir /dev/fscklogs 0770 root system

    # enable armv8_deprecated instruction hooks
    write /proc/sys/abi/swp 1

    # Linux's execveat() syscall may construct paths containing /dev/fd
    # expecting it to point to /proc/self/fd
    symlink /proc/self/fd /dev/fd

    # set RLIMIT_NICE to allow priorities from 19 to -20
    setrlimit 13 40 40
    setrlimit 7 1024 1324
    # This allows the ledtrig-transient properties to be created here so
    # that they can be chown'd to system:system later on boot
    write /sys/class/leds/vibrator/trigger "transient"
    # for inotify watch to /dev/bus/usb/
    mkdir /dev/bus 0755 root root
    mkdir /dev/bus/usb 0755 root root
    mkdir /dev/bus/usb/001 0755 root root
    mkdir /dev/bus/usb/002 0755 root root

on load_persist_props_action
    load_persist_props

on cust_parse_action
    cust_parse
on update_wifionly_identity_action
    update_wifionly_identity

# Indicate to fw loaders that the relevant mounts are up.
on firmware_mounts_complete
    rm /dev/.booting
    
on fs && property:sys.usb.configfs=0
    write /sys/class/android_usb/android0/f_ffs/aliases adb
#   mkdir /dev/usb-ffs 0770 shell shell
#   mkdir /dev/usb-ffs/adb 0770 shell shell
#   mount functionfs adb /dev/usb-ffs/adb uid=2000,gid=2000

    write /sys/class/android_usb/android0/enable 0
    write /sys/class/android_usb/android0/idVendor 18D1
    write /sys/class/android_usb/android0/idProduct D001
#   write /sys/class/android_usb/android0/f_ffs/aliases adb
    write /sys/class/android_usb/android0/functions adb
    write /sys/class/android_usb/android0/iManufacturer ${ro.product.manufacturer}
    write /sys/class/android_usb/android0/iProduct ${ro.product.model}
    write /sys/class/android_usb/android0/iSerial ${ro.serialno}
    
# Mount filesystems and start core system services.
on late-init
    start prepprops
    trigger early-fs

    # Mount fstab in init.{$device}.rc by mount_all command. Optional parameter
    # '--early' can be specified to skip entries with 'latemount'.
    # /system and /vendor must be mounted by the end of the fs stage,
    # while /data is optional.
    trigger fs
    trigger cust_parse_action
    trigger post-fs

    # Mount fstab in init.{$device}.rc by mount_all with '--late' parameter
    # to only mount entries with 'latemount'. This is needed if '--early' is
    # specified in the previous mount_all command on the fs stage.
    # With /system mounted and properties form /system + /factory available,
    # some services can be started.
    trigger late-fs

    trigger update_wifionly_identity_action
    # Now we can mount /data. File encryption requires keymaster to decrypt
    # /data, which in turn can only be loaded when system properties are present.
    trigger post-fs-data

    start recovery
    # Load persist properties and override properties (if enabled) from /data.
    trigger load_persist_props_action

    # Remove a file to wake up anything waiting for firmware.
    trigger firmware_mounts_complete

    #trigger early-boot
    trigger boot

on post-fs
    # Load properties from
    #     /system/build.prop,
    #     /odm/build.prop,
    #     /vendor/build.prop and
    #     /factory/factory.prop
    #load_system_props
    # start essential services
    start servicemanager
    start hwservicemanager
    #start vndservicemanager

    # Mount default storage into root namespace
    mount none /mnt/runtime/default /storage bind rec
    mount none none /storage slave rec

    # We chown/chmod /cache again so because mount is run as root + defaults
    chown system cache /cache
    chmod 0770 /cache
    # We restorecon /cache in case the cache partition has been reset.
    restorecon_recursive /cache

    # Create /cache/recovery in case it's not there. It'll also fix the odd
    # permissions if created by the recovery system.
    mkdir /cache/recovery 0770 system cache

    # create the lost+found directories, so as to enforce our permissions
    mkdir /cache/lost+found 0770 root root

on late-fs
    # HALs required before storage encryption can get unlocked (FBE/FDE)
    class_start early_hal

on post-fs-data && property:ro.crypto.state=encrypted
    start teecd
    
    # We chown/chmod /data again so because mount is run as root + defaults
    chown system system /data
    chmod 0771 /data
    # We restorecon /data in case the userdata partition has been reset.
    restorecon /data

    #mount ext4 /dev/block/bootdevice/by-name/system /system wait ro
    # Make sure we have the device encryption key.
    #start vold

    setprop vold.crypto_unencrypt_updatedir /data/update

    #setprop vold.status start
    
    #disable readdir_ra
    set_readdir_ra userdata 0

    #restorecon_files_under_dir /data/system

    # If there is no post-fs-data action in the init.<device>.rc file, you
    # must uncomment this line, otherwise encrypted filesystems
    # won't work.
    # Set indication (checked by vold) that we have finished this action
    setprop vold.post_fs_data_done 1
    load_data_version_prop
    #cust_parse

on boot
    # basic network init
    ifup lo
    hostname localhost
    domainname localdomain

    # Start standard binderized HAL daemons
    class_start hal

    class_start core
    
    setprop sys.boot_completed 1

## Daemon processes to be run by init.
##
service ueventd /sbin/ueventd
    class core
    critical
    seclabel u:r:ueventd:s0

#init.recovery.hlthchrg.rc
#service charger /sbin/charger -r
#    class charger
#    critical
#    seclabel u:r:charger:s0

#recovery init rc

service hwservicemanager /sbin/hwservicemanager
    user root
    disabled
    group root
    seclabel  u:r:hwservicemanager:s0
    onrestart class_reset hal
    onrestart setprop hwservicemanager.ready false
    writepid /dev/cpuset/system-background/tasks /dev/blkio/system-background/tasks
    
#init.hi3660.rc
on fs && property:ro.crypto.state=encrypted
    # mount mtd partitions
    mkdir /patch_hw 0775 system system
    export ANDROID_STORAGE ""

    wait /dev/block/bootdevice/by-name/system
    wait /dev/block/bootdevice/by-name/userdata
    wait /dev/block/bootdevice/by-name/vbmeta
    #mount_all /vendor/etc/fstab.${ro.hardware}
    #mount_all /fstab.${ro.hardware}
    mount ext4 /dev/block/bootdevice/by-name/system /system ro
    mount ext4 /dev/block/bootdevice/by-name/vendor /vendor ro
    mount_all /fstab.${ro.hardware}.data
        
    #exec - root root -- /patch_hw/patch_procedure

    #mount_all /patch_hw/fstab.patch_step1
    #mount_all /patch_hw/fstab.patch_step2


    restorecon /splash2
    chmod 775 /splash2
    chown root system /splash2

    mkdir /splash2/log 0775 system log
    symlink /splash2/fac_log /data/log/fac_log
    symlink /splash2 /log

    setprop ro.crypto.fuse_sdcard true

#vndservicemanage.rc
#service vndservicemanager /vendor/bin/vndservicemanager /dev/vndbinder
#    class core
#    user system
#    group system readproc
#    writepid /dev/cpuset/system-background/tasks /dev/blkio/system-background/tasks /dev/stune/system-background/tasks

#keymaster rc
service keymaster-3-0 /vendor/bin/hw/android.hardware.keymaster@3.0-service
    class early_hal
    user system
    group system drmrpc log
    seclabel u:r:recovery:s0
	
service keystore_auth /sbin/keystore_auth
    oneshot
    user system
    group root
    disabled
    seclabel u:r:recovery:s0

service keystore /sbin/keystore /data/misc/keystore
    user root
    group root drmrpc readproc
    disabled
    seclabel u:r:recovery:s0	

#init.tee.rc
on init
#mount secure storage partition for teeos
     mkdir /sec_storage
     mount ext4 /dev/block/bootdevice/by-name/secure_storage /sec_storage nosuid nodev noatime wait crypt discard,noauto_da_alloc,mblk_io_submit,data=ordered,context=u:object_r:teecd_data_file:s0
     chown root root /sec_storage
     chmod 600 /sec_storage

on init
#add for TrustedCore driver
    chmod 0400 /dev/hisi_teelog

#secure os tee agent
service teecd /vendor/bin/teecd
    class core
    user root
    group root readproc
    seclabel u:r:tee:s0

#vold.rc
service vold /system/bin/vold \
        --blkid_context=u:r:blkid:s0 --blkid_untrusted_context=u:r:blkid_untrusted:s0 \
        --fsck_context=u:r:fsck:s0 --fsck_untrusted_context=u:r:fsck_untrusted:s0
    class core
    socket vold stream 0660 root mount
    socket cryptd stream 0660 root mount
    socket cryptd2 stream 0660 root mount
    ioprio be 2
    group system
    writepid /dev/cpuset/foreground/tasks /dev/stune/foreground/tasks

#android gatekeeper rc
service gatekeeper-1-0 /vendor/bin/hw/android.hardware.gatekeeper@1.0-service
    class hal
    user system
    group system
    seclabel u:r:recovery:s0

#servicemanager rc
#service servicemanager /system/bin/servicemanager
service servicemanager /sbin/servicemanager
    class core animation
    user root
    group root readproc
    critical
    seclabel u:r:recovery:s0

#keystore rc
#service keystore /system/bin/keystore /data/misc/keystore
#    class main
#    user keystore
#    group keystore drmrpc readproc
#    writepid /dev/cpuset/foreground/tasks /dev/stune/foreground/tasks /dev/blkio/foreground/tasks

on property:vold.status=start && property:ro.crypto.state=encrypted
    exec /system/bin/vdc --wait cryptfs enablefilecrypto
    init_user0
    unlock_user0_key
    setprop vold.status end

#init.recovery.huawei.rc
service oeminfo_nvm /sbin/oeminfo_nvm_server
    critical
    ioprio rt 4
    seclabel u:r:oeminfo_nvm:s0
	
service fixsysven /sbin/fixsysven.sh
    oneshot
    disabled
    seclabel u:r:recovery:s0	

on init
    write /sys/module/hisi_nve/parameters/nve /dev/block/bootdevice/by-name/nvme
    mount /tmp /tmp tmpfs
    # change nve device visit permission
    wait /dev/nve0
    chmod 0640 /dev/nve0
    write /proc/sys/vm/max_map_count 1000000


on fs
    wait /dev/block/bootdevice/by-name/oeminfo
    start oeminfo_nvm
	
on property:twrp.decryptdone=true
    stop vold
    stop gatekeeper-1-0
    stop keymaster-3-0
    stop teecd
    stop servicemanager
    stop hwservicemanager
    umount /vendor
	umount /system
	start fixsysven

on property:ro.crypto.state=unsupported
    stop vold
	stop keystore
    stop gatekeeper-1-0
    stop keymaster-3-0
    stop teecd
